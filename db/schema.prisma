// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum MembershipRole {
  owner
  administrator
  user
}

enum GlobalRole {
  superadministrator
  customer
}

enum TokenType {
  reset_password
}

// --------------------------------------

model User {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  name           String?
  email          String       @unique
  hashedPassword String?
  role           GlobalRole   @default(customer)
  profile        Profile[]
  tokens         Token[]
  sessions       Session[]
  membership     Membership[]

  @@map("users")
}

model Profile {
  id         String  @id @default(uuid())
  stripeId   String?
  customerId String?

  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Session {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("sessions")
}

model Organization {
  id        String @id @default(uuid())
  name      String
  reference String @unique

  Membership Membership[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("organizations")
}

model Membership {
  id   String         @id @default(uuid())
  role MembershipRole @default(owner)

  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User?        @relation(fields: [userId], references: [id])
  userId         String
  organizationId String

  invitedName  String?
  invitedEmail String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, invitedEmail])
  @@map("memberships")
}

model Token {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType @default(reset_password)
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
  @@map("tokens")
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }
