// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

enum MembershipRole {
  owner
  administrator
  user
}

enum GlobalRole {
  superadministrator
  customer
}

enum TokenType {
  reset_password
}

// --------------------------------------

model User {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  name           String?
  email          String       @unique
  hashedPassword String?
  role           GlobalRole   @default(customer)
  profile        Profile[]
  tokens         Token[]
  sessions       Session[]
  membership     Membership[]
  recipes        Recipe[]

  @@map("users")
}

model Profile {
  id         String   @id @default(uuid())
  stripeId   String?
  customerId String?
  username   String?  @unique
  picture    String?
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("profiles")
}

model Session {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("sessions")
}

model Organization {
  id        String @id @default(uuid())
  name      String
  reference String @unique

  Membership Membership[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("organizations")
}

model Membership {
  id   String         @id @default(uuid())
  role MembershipRole @default(owner)

  organization   Organization   @relation(fields: [organizationId], references: [id])
  user           User?          @relation(fields: [userId], references: [id])
  userId         String
  organizationId String
  availabilities Availability[]

  invitedName  String?
  invitedEmail String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, invitedEmail])
  @@map("memberships")
}

model Token {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType @default(reset_password)
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
  @@map("tokens")
}

model Recipe {
  id        String   @id @default(uuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  reference String   @unique
  slug      String   @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("recipes")
}

model Availability {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startTime DateTime @db.Time
  endTime   DateTime @db.Time

  membership   Membership? @relation(fields: [membershipId], references: [id])
  schedule     Schedule?   @relation(fields: [scheduleId], references: [id])
  scheduleId   String?
  membershipId String?

  @@map("availabilities")
}

model Schedule {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  name         String
  description  String?        @db.Text
  timeZone     String?
  availability Availability[]

  @@map("schedules")
}

model Booking {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}
